# 2017-12-03 11:37:12.283389
# SECTION: 08_booleans
# TEST: 005
# INFO: Single dim in expression
# REQUIRED EXTENSIONS: BOOLOP
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=false(bool)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 11 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@a=false(bool)
# Executing instruction: ICLEARS at line: 12 with following arguments:
# Executing instruction: IPUSHS at line: 15 with following arguments:
# Arg1: LF@a=true(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 17 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 22 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=42(int)
# Executing instruction: IJUMP at line: 23 with following arguments:
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: IJUMP at line: 29 with following arguments:
# Executing instruction: ILABEL at line: 32 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 62 (26+36)
# 
#   1: scope 
#   2:  dim a as boolean = true
#   3:  if a then 
#   4:  print 42; 
#   5:  else 
#   6:  end if
#   7:  end scope

########################################

.IFJcode17                                                                      #     1/32
JUMP main                                                                       #     2/32
# MAIN                                                                          #     4/32
LABEL main                                                                      #     5/32
CREATEFRAME                                                                     #     6/32
PUSHFRAME                                                                       #     7/32
DEFVAR LF@a                                                                     #     8/32
MOVE LF@a bool@false                                                            #     9/32
PUSHS bool@true                                                                 #    10/32
POPS LF@a                                                                       #    11/32
CLEARS                                                                          #    12/32
# IF BLOCK                                                                      #    13/32
# IF                                                                            #    14/32
PUSHS LF@a                                                                      #    15/32
PUSHS bool@true                                                                 #    16/32
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    17/32
# THEN                                                                          #    18/32
PUSHS int@42                                                                    #    19/32
DEFVAR LF@__INTERNAL__VAR_0                                                     #    20/32
POPS LF@__INTERNAL__VAR_0                                                       #    21/32
WRITE LF@__INTERNAL__VAR_0                                                      #    22/32
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    23/32
LABEL __INTERNAL__COND_0_END                                                    #    24/32
# ELSE                                                                          #    25/32
# END IF                                                                        #    26/32
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    27/32
# END IF BLOCK                                                                  #    28/32
JUMP __INTERNAL__FILE_END                                                       #    29/32
# PROGRAM END                                                                   #    31/32
LABEL __INTERNAL__FILE_END                                                      #    32/32