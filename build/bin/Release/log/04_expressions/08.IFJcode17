# 2017-12-04 17:23:11.175543
# SECTION: 04_expressions
# TEST: 08
# INFO: divide integer and doubles
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BOOLOP, UNARY, IFTHEN, FUNEXP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=9(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 12 with following arguments:
# Arg1: Stack@=9(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 13 with following arguments:
# Executing instruction: IDEFVAR at line: 14 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 15 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 17 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@c
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: Const@=0(double)
# Dest: LF@c()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 22 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 23 with following arguments:
# Arg1: Stack@=8(double)
# Dest: LF@c=0(double)
# Executing instruction: ICLEARS at line: 24 with following arguments:
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@d
# Executing instruction: IMOVE at line: 26 with following arguments:
# Arg1: Const@=0(double)
# Dest: LF@d()
# Executing instruction: IPUSHS at line: 27 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 28 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 29 with following arguments:
# Arg1: Stack@=2(double)
# Dest: LF@d=0(double)
# Executing instruction: ICLEARS at line: 30 with following arguments:
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@c=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: LF@d=2(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 33 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 34 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IMOVE at line: 35 with following arguments:
# Arg1: Const@=0(double)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IPOPS at line: 36 with following arguments:
# Arg1: Stack@=4(double)
# Dest: TF@__INTERNAL__VAR_0=0(double)
# Executing instruction: IWRITE at line: 37 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=4(double)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=
# (string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 39 with following arguments:
# Arg1: Stack@=
# (string)
# Dest: TF@__INTERNAL__VAR_0=4(double)
# Executing instruction: IWRITE at line: 40 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=
# (string)
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 42 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@b=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 45 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2INTS at line: 46 with following arguments:
# Arg1: Stack@=4.5(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@__INTERNAL__VAR_0=
# (string)
# Executing instruction: IWRITE at line: 48 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=4(int)
# Executing instruction: IJUMP at line: 49 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 189 (67+122)
# 
#   1: ' divide integer and doubles
#   2: scope
#   3:     dim a as integer = 9
#   4:     dim b as integer = 2
#   5:     dim c as double = 8
#   6:     dim d as double = 2
#   7: 
#   8:     print c / d; !"\n"; a \ b;
#   9: end scope

########################################

.IFJcode17                                                                      #     1/54
JUMP main                                                                       #     2/54
# MAIN                                                                          #     4/54
LABEL main                                                                      #     5/54
CREATEFRAME                                                                     #     6/54
PUSHFRAME                                                                       #     7/54
CREATEFRAME                                                                     #     8/54
DEFVAR LF@a                                                                     #     9/54
MOVE LF@a int@0                                                                 #    10/54
PUSHS int@9                                                                     #    11/54
POPS LF@a                                                                       #    12/54
CLEARS                                                                          #    13/54
DEFVAR LF@b                                                                     #    14/54
MOVE LF@b int@0                                                                 #    15/54
PUSHS int@2                                                                     #    16/54
POPS LF@b                                                                       #    17/54
CLEARS                                                                          #    18/54
DEFVAR LF@c                                                                     #    19/54
MOVE LF@c float@0.0                                                             #    20/54
PUSHS int@8                                                                     #    21/54
INT2FLOATS                                                                      #    22/54
POPS LF@c                                                                       #    23/54
CLEARS                                                                          #    24/54
DEFVAR LF@d                                                                     #    25/54
MOVE LF@d float@0.0                                                             #    26/54
PUSHS int@2                                                                     #    27/54
INT2FLOATS                                                                      #    28/54
POPS LF@d                                                                       #    29/54
CLEARS                                                                          #    30/54
PUSHS LF@c                                                                      #    31/54
PUSHS LF@d                                                                      #    32/54
DIVS                                                                            #    33/54
DEFVAR TF@__INTERNAL__VAR_0                                                     #    34/54
MOVE TF@__INTERNAL__VAR_0 float@0.0                                             #    35/54
POPS TF@__INTERNAL__VAR_0                                                       #    36/54
WRITE TF@__INTERNAL__VAR_0                                                      #    37/54
PUSHS string@\010                                                               #    38/54
POPS TF@__INTERNAL__VAR_0                                                       #    39/54
WRITE TF@__INTERNAL__VAR_0                                                      #    40/54
PUSHS LF@a                                                                      #    41/54
INT2FLOATS                                                                      #    42/54
PUSHS LF@b                                                                      #    43/54
INT2FLOATS                                                                      #    44/54
DIVS                                                                            #    45/54
FLOAT2INTS                                                                      #    46/54
POPS TF@__INTERNAL__VAR_0                                                       #    47/54
WRITE TF@__INTERNAL__VAR_0                                                      #    48/54
JUMP __INTERNAL__FILE_END                                                       #    49/54
# MAIN END                                                                      #    51/54
# PROGRAM END                                                                   #    53/54
LABEL __INTERNAL__FILE_END                                                      #    54/54