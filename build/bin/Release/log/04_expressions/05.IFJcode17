# 2017-12-03 11:37:07.539776
# SECTION: 04_expressions
# TEST: 05
# INFO: simple adding two vars to another variable
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=58(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=58(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=-58(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 15 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 16 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=116(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=116(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 19 with following arguments:
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@a=-58(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: LF@b=116(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 22 with following arguments:
# Arg1: Stack@=-58(int)
# Arg2: Stack@=116(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 23 with following arguments:
# Arg1: Stack@=58(int)
# Dest: LF@a=-58(int)
# Executing instruction: ICLEARS at line: 24 with following arguments:
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: LF@a=58(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 26 with following arguments:
# Dest: LF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=58(int)
# Dest: LF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 28 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=58(int)
# Executing instruction: IJUMP at line: 29 with following arguments:
# Executing instruction: ILABEL at line: 32 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 104 (39+65)
# 
#   1: ' simple adding two vars to another variable
#   2: scope
#   3:     dim a as integer = 0 - 58
#   4:     dim b as integer = 116
#   5:     a = a + b
#   6:     print a;
#   7: end scope

########################################

.IFJcode17                                                                      #     1/32
JUMP main                                                                       #     2/32
# MAIN                                                                          #     4/32
LABEL main                                                                      #     5/32
CREATEFRAME                                                                     #     6/32
PUSHFRAME                                                                       #     7/32
DEFVAR LF@a                                                                     #     8/32
MOVE LF@a int@0                                                                 #     9/32
PUSHS int@0                                                                     #    10/32
PUSHS int@58                                                                    #    11/32
SUBS                                                                            #    12/32
POPS LF@a                                                                       #    13/32
CLEARS                                                                          #    14/32
DEFVAR LF@b                                                                     #    15/32
MOVE LF@b int@0                                                                 #    16/32
PUSHS int@116                                                                   #    17/32
POPS LF@b                                                                       #    18/32
CLEARS                                                                          #    19/32
PUSHS LF@a                                                                      #    20/32
PUSHS LF@b                                                                      #    21/32
ADDS                                                                            #    22/32
POPS LF@a                                                                       #    23/32
CLEARS                                                                          #    24/32
PUSHS LF@a                                                                      #    25/32
DEFVAR LF@__INTERNAL__VAR_0                                                     #    26/32
POPS LF@__INTERNAL__VAR_0                                                       #    27/32
WRITE LF@__INTERNAL__VAR_0                                                      #    28/32
JUMP __INTERNAL__FILE_END                                                       #    29/32
# PROGRAM END                                                                   #    31/32
LABEL __INTERNAL__FILE_END                                                      #    32/32