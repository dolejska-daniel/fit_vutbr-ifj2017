# 2017-12-03 11:37:07.730784
# SECTION: 04_expressions
# TEST: 10
# INFO: Convert integer into double
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 15 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 16 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 19 with following arguments:
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 21 with following arguments:
# Arg1: Const@=0(double)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 24 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=2(int)
# Dest: Stack@()
# Error at line: 24
# Wrong operand type!
# 
# EXPECTED INTERPRETER STDOUT:

#  1.5


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 53
# PRICE: ---
# 
#   1: ' Convert integer into double
#   2: function foo(a as integer, b as integer) as integer
#   3: 
#   4: end function
#   5: 
#   6: scope
#   7: 
#   8: 	dim a as integer
#   9: 	a = 3
#  10: 	dim b as double
#  11: 	b = a / 2
#  12: 	print b;
#  13: 
#  14: end scope

########################################

.IFJcode17                                                                      #     1/34
JUMP main                                                                       #     2/34
# FUNCTION                                                                      #     4/34
LABEL foo                                                                       #     5/34
PUSHFRAME                                                                       #     6/34
PUSHS int@0                                                                     #     7/34
RETURN                                                                          #     8/34
# END FUNCTION                                                                  #     9/34
# MAIN                                                                          #    11/34
LABEL main                                                                      #    12/34
CREATEFRAME                                                                     #    13/34
PUSHFRAME                                                                       #    14/34
DEFVAR LF@a                                                                     #    15/34
MOVE LF@a int@0                                                                 #    16/34
PUSHS int@3                                                                     #    17/34
POPS LF@a                                                                       #    18/34
CLEARS                                                                          #    19/34
DEFVAR LF@b                                                                     #    20/34
MOVE LF@b float@0.0                                                             #    21/34
PUSHS LF@a                                                                      #    22/34
PUSHS int@2                                                                     #    23/34
DIVS                                                                            #    24/34
POPS LF@b                                                                       #    25/34
CLEARS                                                                          #    26/34
PUSHS LF@b                                                                      #    27/34
DEFVAR LF@__INTERNAL__VAR_0                                                     #    28/34
POPS LF@__INTERNAL__VAR_0                                                       #    29/34
WRITE LF@__INTERNAL__VAR_0                                                      #    30/34
JUMP __INTERNAL__FILE_END                                                       #    31/34
# PROGRAM END                                                                   #    33/34
LABEL __INTERNAL__FILE_END                                                      #    34/34