# 2017-12-03 11:37:09.787252
# SECTION: 06_loops
# TEST: 03
# INFO: nested while loop
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: Const@=25(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 11 with following arguments:
# Arg1: Stack@=25(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 12 with following arguments:
# Executing instruction: IDEFVAR at line: 13 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 14 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 15 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 16 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 17 with following arguments:
# Executing instruction: ILABEL at line: 18 with following arguments:
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: LF@a=25(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=9(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 22 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 23 with following arguments:
# Arg1: Stack@=25(int)
# Arg2: Stack@=-9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 25 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 27 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 28 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 29 with following arguments:
# Arg1: Stack@=-12(int)
# Dest: LF@b=10(int)
# Executing instruction: ICLEARS at line: 30 with following arguments:
# Executing instruction: ILABEL at line: 31 with following arguments:
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: LF@b=-12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 34 with following arguments:
# Arg1: Stack@=-12(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 35 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: LF@a=25(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 39 with following arguments:
# Dest: LF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 40 with following arguments:
# Arg1: Stack@=25(int)
# Dest: LF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 41 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=25(int)
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: Const@=: (string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 43 with following arguments:
# Arg1: Stack@=: (string)
# Dest: LF@__INTERNAL__VAR_0=25(int)
# Executing instruction: IWRITE at line: 44 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=: (string)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: LF@b=-12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=-12(int)
# Dest: LF@__INTERNAL__VAR_0=: (string)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=-12(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=-12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 50 with following arguments:
# Arg1: Stack@=-12(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=-11(int)
# Dest: LF@b=-12(int)
# Executing instruction: ICLEARS at line: 52 with following arguments:
# Executing instruction: IJUMP at line: 53 with following arguments:
# Executing instruction: ILABEL at line: 31 with following arguments:
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: LF@b=-11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 34 with following arguments:
# Arg1: Stack@=-11(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 35 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: LF@a=25(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 39 with following arguments:
# Dest: LF@__INTERNAL__VAR_0
# Error at line: 39
# Symbol already exists!
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# - 25: -12 25: -11 25: -10 25: -9 25: -8 25: -7 25: -6 25: -5 25: -4 25: -3 25: -2 25: -1 25:  0 22: -12 22: -11 22: -10 22: -9 22: -8 22: -7 22: -6 22: -5 22: -4 22: -3 22: -2 22: -1 22:  0 19: -12 19: -11 19: -10 19: -9 19: -8 19: -7 19: -6 19: -5 19: -4 19: -3 19: -2 19: -1 19:  0 16: -12 16: -11 16: -10 16: -9 16: -8 16: -7 16: -6 16: -5 16: -4 16: -3 16: -2 16: -1 16:  0 13: -12 13: -11 13: -10 13: -9 13: -8 13: -7 13: -6 13: -5 13: -4 13: -3 13: -2 13: -1 13:  0 10: -12 10: -11 10: -10 10: -9 10: -8 10: -7 10: -6 10: -5 10: -4 10: -3 10: -2 10: -1 10:  0 7: -12 7: -11 7: -10 7: -9 7: -8 7: -7 7: -6 7: -5 7: -4 7: -3 7: -2 7: -1 7:  0 4: -12 4: -11 4: -10 4: -9 4: -8 4: -7 4: -6 4: -5 4: -4 4: -3 4: -2 4: -1 4:  0 1: -12 1: -11 1: -10 1: -9 1: -8 1: -7 1: -6 1: -5 1: -4 1: -3 1: -2 1: -1 1:  0-2: -12-2: -11-2: -10-2: -9-2: -8-2: -7-2: -6-2: -5-2: -4-2: -3-2: -2-2: -1-2:  0-5: -12-5: -11-5: -10-5: -9-5: -8-5: -7-5: -6-5: -5-5: -4-5: -3-5: -2-5: -1-5:  0-8: -12-8: -11-8: -10-8: -9-8: -8-8: -7-8: -6-8: -5-8: -4-8: -3-8: -2-8: -1-8:  0
# + 25: -12

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 52
# PRICE: ---
# 
#   1: ' nested while loop
#   2: scope
#   3: 	dim a as integer = 25
#   4: 	dim b as integer = 10
#   5: 	do while a > (0 - 9)
#   6: 		b = 0 - 12
#   7: 		do while b <> 1
#   8: 			print a; !": "; b;
#   9: 			b = b + 1
#  10: 		loop
#  11: 		a = a - 3
#  12: 	loop
#  13: end scope

########################################

.IFJcode17                                                                      #     1/65
JUMP main                                                                       #     2/65
# MAIN                                                                          #     4/65
LABEL main                                                                      #     5/65
CREATEFRAME                                                                     #     6/65
PUSHFRAME                                                                       #     7/65
DEFVAR LF@a                                                                     #     8/65
MOVE LF@a int@0                                                                 #     9/65
PUSHS int@25                                                                    #    10/65
POPS LF@a                                                                       #    11/65
CLEARS                                                                          #    12/65
DEFVAR LF@b                                                                     #    13/65
MOVE LF@b int@0                                                                 #    14/65
PUSHS int@10                                                                    #    15/65
POPS LF@b                                                                       #    16/65
CLEARS                                                                          #    17/65
LABEL __INTERNAL__LOOP_0_BEGIN                                                  #    18/65
PUSHS LF@a                                                                      #    19/65
PUSHS int@0                                                                     #    20/65
PUSHS int@9                                                                     #    21/65
SUBS                                                                            #    22/65
GTS                                                                             #    23/65
PUSHS bool@true                                                                 #    24/65
JUMPIFNEQS __INTERNAL__LOOP_0_END                                               #    25/65
PUSHS int@0                                                                     #    26/65
PUSHS int@12                                                                    #    27/65
SUBS                                                                            #    28/65
POPS LF@b                                                                       #    29/65
CLEARS                                                                          #    30/65
LABEL __INTERNAL__LOOP_1_BEGIN                                                  #    31/65
PUSHS LF@b                                                                      #    32/65
PUSHS int@1                                                                     #    33/65
EQS                                                                             #    34/65
NOTS                                                                            #    35/65
PUSHS bool@true                                                                 #    36/65
JUMPIFNEQS __INTERNAL__LOOP_1_END                                               #    37/65
PUSHS LF@a                                                                      #    38/65
DEFVAR LF@__INTERNAL__VAR_0                                                     #    39/65
POPS LF@__INTERNAL__VAR_0                                                       #    40/65
WRITE LF@__INTERNAL__VAR_0                                                      #    41/65
PUSHS string@:\032                                                              #    42/65
POPS LF@__INTERNAL__VAR_0                                                       #    43/65
WRITE LF@__INTERNAL__VAR_0                                                      #    44/65
PUSHS LF@b                                                                      #    45/65
POPS LF@__INTERNAL__VAR_0                                                       #    46/65
WRITE LF@__INTERNAL__VAR_0                                                      #    47/65
PUSHS LF@b                                                                      #    48/65
PUSHS int@1                                                                     #    49/65
ADDS                                                                            #    50/65
POPS LF@b                                                                       #    51/65
CLEARS                                                                          #    52/65
JUMP __INTERNAL__LOOP_1_BEGIN                                                   #    53/65
LABEL __INTERNAL__LOOP_1_END                                                    #    54/65
PUSHS LF@a                                                                      #    55/65
PUSHS int@3                                                                     #    56/65
SUBS                                                                            #    57/65
POPS LF@a                                                                       #    58/65
CLEARS                                                                          #    59/65
JUMP __INTERNAL__LOOP_0_BEGIN                                                   #    60/65
LABEL __INTERNAL__LOOP_0_END                                                    #    61/65
JUMP __INTERNAL__FILE_END                                                       #    62/65
# PROGRAM END                                                                   #    64/65
LABEL __INTERNAL__FILE_END                                                      #    65/65