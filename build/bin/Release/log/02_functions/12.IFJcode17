# 2017-12-04 17:23:09.906168
# SECTION: 02_functions
# TEST: 12
# INFO: Recursive function
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BOOLOP, UNARY, IFTHEN, FUNEXP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHFRAME at line: 47 with following arguments:
# Executing instruction: ICREATEFRAME at line: 48 with following arguments:
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=4(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 53 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 54 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 55 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=3(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=3(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=2(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=2(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=1(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=1(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=0(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=0(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=-1(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 25 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 56 with following arguments:
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 58 with following arguments:
# Executing instruction: IPUSHS at line: 59 with following arguments:
# Arg1: LF@a=42(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 60 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IMOVE at line: 61 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IPOPS at line: 62 with following arguments:
# Arg1: Stack@=42(int)
# Dest: TF@__INTERNAL__VAR_0=0(int)
# Executing instruction: IWRITE at line: 63 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=42(int)
# Executing instruction: IJUMP at line: 64 with following arguments:
# Executing instruction: ILABEL at line: 69 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 528 (224+304)
# 
#   1: ' Recursive function
#   2: 
#   3: function recursive(param as integer) as integer
#   4: 	dim param0 as integer
#   5: 	param0 = param - 1
#   6: 	if param = 0 then
#   7: 		return 42
#   8: 	else
#   9: 		return recursive(param0)
#  10: 	end if
#  11: end function
#  12: 
#  13: scope
#  14: 	dim a as integer
#  15: 	a = recursive(4)
#  16: 	print a;
#  17: 
#  18: end scope 

########################################

.IFJcode17                                                                      #     1/69
JUMP main                                                                       #     2/69
# FUNCTION                                                                      #     4/69
LABEL recursive                                                                 #     5/69
PUSHFRAME                                                                       #     6/69
CREATEFRAME                                                                     #     7/69
DEFVAR LF@param0                                                                #     8/69
MOVE LF@param0 int@0                                                            #     9/69
PUSHS LF@param                                                                  #    10/69
PUSHS int@1                                                                     #    11/69
SUBS                                                                            #    12/69
POPS LF@param0                                                                  #    13/69
CLEARS                                                                          #    14/69
# IF BLOCK                                                                      #    15/69
CREATEFRAME                                                                     #    16/69
# IF                                                                            #    17/69
PUSHS LF@param                                                                  #    18/69
PUSHS int@0                                                                     #    19/69
EQS                                                                             #    20/69
PUSHS bool@true                                                                 #    21/69
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    22/69
# THEN                                                                          #    23/69
PUSHS int@42                                                                    #    24/69
RETURN                                                                          #    25/69
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    26/69
LABEL __INTERNAL__COND_0_END                                                    #    27/69
# ELSE                                                                          #    28/69
CREATEFRAME                                                                     #    29/69
PUSHS LF@param0                                                                 #    30/69
DEFVAR TF@param                                                                 #    31/69
POPS TF@param                                                                   #    32/69
CALL recursive                                                                  #    33/69
POPFRAME                                                                        #    34/69
RETURN                                                                          #    35/69
# END IF                                                                        #    36/69
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    37/69
CREATEFRAME                                                                     #    38/69
# END IF BLOCK                                                                  #    39/69
PUSHS int@0                                                                     #    40/69
RETURN                                                                          #    41/69
# END FUNCTION                                                                  #    42/69
# MAIN                                                                          #    44/69
LABEL main                                                                      #    45/69
CREATEFRAME                                                                     #    46/69
PUSHFRAME                                                                       #    47/69
CREATEFRAME                                                                     #    48/69
DEFVAR LF@a                                                                     #    49/69
MOVE LF@a int@0                                                                 #    50/69
CREATEFRAME                                                                     #    51/69
PUSHS int@4                                                                     #    52/69
DEFVAR TF@param                                                                 #    53/69
POPS TF@param                                                                   #    54/69
CALL recursive                                                                  #    55/69
POPFRAME                                                                        #    56/69
POPS LF@a                                                                       #    57/69
CLEARS                                                                          #    58/69
PUSHS LF@a                                                                      #    59/69
DEFVAR TF@__INTERNAL__VAR_0                                                     #    60/69
MOVE TF@__INTERNAL__VAR_0 int@0                                                 #    61/69
POPS TF@__INTERNAL__VAR_0                                                       #    62/69
WRITE TF@__INTERNAL__VAR_0                                                      #    63/69
JUMP __INTERNAL__FILE_END                                                       #    64/69
# MAIN END                                                                      #    66/69
# PROGRAM END                                                                   #    68/69
LABEL __INTERNAL__FILE_END                                                      #    69/69