# 2017-12-04 10:53:27.373151
# SECTION: 02_functions
# TEST: 12
# INFO: Recursive function
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 44 with following arguments:
# Executing instruction: ICREATEFRAME at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: ICREATEFRAME at line: 47 with following arguments:
# Executing instruction: IDEFVAR at line: 48 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 49 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 50 with following arguments:
# Executing instruction: IPUSHS at line: 51 with following arguments:
# Arg1: Const@=4(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 52 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 54 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=3(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=3(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=2(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=2(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=1(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=1(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 29 with following arguments:
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@param0=0(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: TF@param
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=0(int)
# Dest: TF@param()
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: ICREATEFRAME at line: 7 with following arguments:
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: LF@param0
# Executing instruction: IMOVE at line: 9 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@param0()
# Executing instruction: IPUSHS at line: 10 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 12 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 13 with following arguments:
# Arg1: Stack@=-1(int)
# Dest: LF@param0=0(int)
# Executing instruction: ICLEARS at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 16 with following arguments:
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 25 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IRETURN at line: 35 with following arguments:
# Executing instruction: IPOPFRAME at line: 55 with following arguments:
# Executing instruction: IPOPS at line: 56 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 57 with following arguments:
# Executing instruction: IPUSHS at line: 58 with following arguments:
# Arg1: LF@a=42(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 59 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 60 with following arguments:
# Arg1: Stack@=42(int)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 61 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=42(int)
# Executing instruction: IJUMP at line: 62 with following arguments:
# Executing instruction: ILABEL at line: 65 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 526 (223+303)
# 
#   1: ' Recursive function
#   2: 
#   3: function recursive(param as integer) as integer
#   4: 	dim param0 as integer
#   5: 	param0 = param - 1
#   6: 	if param = 0 then
#   7: 		return 42
#   8: 	else
#   9: 		return recursive(param0)
#  10: 	end if
#  11: end function
#  12: 
#  13: scope
#  14: 	dim a as integer
#  15: 	a = recursive(4)
#  16: 	print a;
#  17: 
#  18: end scope 

########################################

.IFJcode17                                                                      #     1/65
JUMP main                                                                       #     2/65
# FUNCTION                                                                      #     4/65
LABEL recursive                                                                 #     5/65
PUSHFRAME                                                                       #     6/65
CREATEFRAME                                                                     #     7/65
DEFVAR LF@param0                                                                #     8/65
MOVE LF@param0 int@0                                                            #     9/65
PUSHS LF@param                                                                  #    10/65
PUSHS int@1                                                                     #    11/65
SUBS                                                                            #    12/65
POPS LF@param0                                                                  #    13/65
CLEARS                                                                          #    14/65
# IF BLOCK                                                                      #    15/65
CREATEFRAME                                                                     #    16/65
# IF                                                                            #    17/65
PUSHS LF@param                                                                  #    18/65
PUSHS int@0                                                                     #    19/65
EQS                                                                             #    20/65
PUSHS bool@true                                                                 #    21/65
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    22/65
# THEN                                                                          #    23/65
PUSHS int@42                                                                    #    24/65
RETURN                                                                          #    25/65
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    26/65
LABEL __INTERNAL__COND_0_END                                                    #    27/65
# ELSE                                                                          #    28/65
CREATEFRAME                                                                     #    29/65
PUSHS LF@param0                                                                 #    30/65
DEFVAR TF@param                                                                 #    31/65
POPS TF@param                                                                   #    32/65
CALL recursive                                                                  #    33/65
POPFRAME                                                                        #    34/65
RETURN                                                                          #    35/65
# END IF                                                                        #    36/65
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    37/65
# END IF BLOCK                                                                  #    38/65
PUSHS int@0                                                                     #    39/65
RETURN                                                                          #    40/65
# END FUNCTION                                                                  #    41/65
# MAIN                                                                          #    43/65
LABEL main                                                                      #    44/65
CREATEFRAME                                                                     #    45/65
PUSHFRAME                                                                       #    46/65
CREATEFRAME                                                                     #    47/65
DEFVAR LF@a                                                                     #    48/65
MOVE LF@a int@0                                                                 #    49/65
CREATEFRAME                                                                     #    50/65
PUSHS int@4                                                                     #    51/65
DEFVAR TF@param                                                                 #    52/65
POPS TF@param                                                                   #    53/65
CALL recursive                                                                  #    54/65
POPFRAME                                                                        #    55/65
POPS LF@a                                                                       #    56/65
CLEARS                                                                          #    57/65
PUSHS LF@a                                                                      #    58/65
DEFVAR TF@__INTERNAL__VAR_0                                                     #    59/65
POPS TF@__INTERNAL__VAR_0                                                       #    60/65
WRITE TF@__INTERNAL__VAR_0                                                      #    61/65
JUMP __INTERNAL__FILE_END                                                       #    62/65
# PROGRAM END                                                                   #    64/65
LABEL __INTERNAL__FILE_END                                                      #    65/65