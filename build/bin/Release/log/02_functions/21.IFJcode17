# 2017-12-03 11:37:05.270241
# SECTION: 02_functions
# TEST: 21
# INFO: Recursion of three functions
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, UNARY, IFTHEN, BOOLOP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 130 with following arguments:
# Executing instruction: ICREATEFRAME at line: 131 with following arguments:
# Executing instruction: IPUSHFRAME at line: 132 with following arguments:
# Executing instruction: IDEFVAR at line: 133 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 134 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 135 with following arguments:
# Executing instruction: IPUSHS at line: 136 with following arguments:
# Arg1: Const@=20(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 137 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 138 with following arguments:
# Arg1: Stack@=20(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 139 with following arguments:
# Executing instruction: ILABEL at line: 87 with following arguments:
# Executing instruction: IPUSHFRAME at line: 88 with following arguments:
# Executing instruction: IDEFVAR at line: 89 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 90 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 93 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 95 with following arguments:
# Arg1: Stack@=20(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 96 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 97 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 99 with following arguments:
# Executing instruction: IPUSHS at line: 100 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 101 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 102 with following arguments:
# Arg1: Stack@=20(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 103 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=20(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=20(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=19(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=19(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=19(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=19(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=19(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=19(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=19(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=19(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=18(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=18(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=17(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=17(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=17(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=17(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=17(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=17(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=17(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=17(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=16(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=16(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=16(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=16(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=16(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=16(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=16(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=15(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=15(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=15(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=15(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=15(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=15(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=15(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=15(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=14(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=14(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=14(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=14(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=14(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=14(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=14(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=13(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=13(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=13(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=13(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=13(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=13(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=13(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=13(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=12(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=12(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=12(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=12(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=11(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=11(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=11(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=11(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=11(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=11(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=10(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=10(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=9(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=9(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=9(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=9(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=8(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=8(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=8(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=7(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=7(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=7(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=7(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=7(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=7(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=6(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=6(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=6(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=6(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=6(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=5(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=5(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=5(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=5(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=5(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=5(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=4(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=4(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=3(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=3(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=3(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=2(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=2(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 20 with following arguments:
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 24 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 26 with following arguments:
# Executing instruction: ICREATEFRAME at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@b=1(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@nn
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=1(int)
# Dest: TF@nn()
# Executing instruction: ICALL at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IPUSHFRAME at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: LF@nn=1(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 55 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 57 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 66 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 67 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 68 with following arguments:
# Executing instruction: ICREATEFRAME at line: 69 with following arguments:
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@b=0(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: TF@a
# Executing instruction: IPOPS at line: 72 with following arguments:
# Arg1: Stack@=0(int)
# Dest: TF@a()
# Executing instruction: ICALL at line: 73 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: IPUSHFRAME at line: 6 with following arguments:
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: LF@a=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 13 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 15 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 18 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=1(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=2(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=3(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=4(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=5(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=6(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=7(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=8(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=9(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=10(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=11(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=12(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=13(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=14(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=15(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=16(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=17(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 74 with following arguments:
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=18(int)
# Executing instruction: ICLEARS at line: 76 with following arguments:
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 78 with following arguments:
# Executing instruction: IPOPFRAME at line: 32 with following arguments:
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=19(int)
# Executing instruction: ICLEARS at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 36 with following arguments:
# Executing instruction: IPOPFRAME at line: 104 with following arguments:
# Executing instruction: IPOPS at line: 105 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@b=0(int)
# Executing instruction: ICLEARS at line: 106 with following arguments:
# Executing instruction: IPUSHS at line: 107 with following arguments:
# Arg1: LF@b=20(int)
# Dest: Stack@()
# Executing instruction: IRETURN at line: 108 with following arguments:
# Executing instruction: IPOPFRAME at line: 140 with following arguments:
# Executing instruction: IPOPS at line: 141 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 142 with following arguments:
# Executing instruction: IPUSHS at line: 143 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 144 with following arguments:
# Dest: LF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 145 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 146 with following arguments:
# Arg1: LF@__INTERNAL__VAR_0=20(int)
# Executing instruction: IJUMP at line: 147 with following arguments:
# Executing instruction: ILABEL at line: 150 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 2370 (901+1469)
# 
#   1: ' Recursion of three functions
#   2: 
#   3: declare function bar(nn as integer) as integer
#   4: 
#   5: function foo(a as integer) as integer
#   6: 	dim b as integer
#   7: 	if (a = 0) then
#   8: 		return 20
#   9: 	else
#  10: 		b = a - 1
#  11: 		b = bar(b)	
#  12: 		return b
#  13: 	end if
#  14: end function
#  15: 
#  16: function bar(a as integer) as integer
#  17: 	dim b as integer
#  18: 	if (a = 0) then
#  19: 		return 20
#  20: 	else
#  21: 		b = a - 1
#  22: 		b = foo(b)
#  23: 		return b
#  24: 	end if
#  25: end function
#  26: 
#  27: function start(a as integer) as integer
#  28: 
#  29: 	dim b as integer
#  30: 
#  31: 	if (a > 10) then 
#  32: 		b = foo(a)
#  33: 		return b
#  34: 	else
#  35: 		b = bar(a)
#  36: 		return b
#  37: 	end if	
#  38: 
#  39: 	
#  40: end function
#  41: 
#  42: scope
#  43: 	
#  44: 	dim a as integer
#  45: 	a = start(20)
#  46: 	print a;
#  47: 
#  48: 
#  49: end scope

########################################

.IFJcode17                                                                      #     1/150
JUMP main                                                                       #     2/150
# FUNCTION                                                                      #     4/150
LABEL foo                                                                       #     5/150
PUSHFRAME                                                                       #     6/150
DEFVAR LF@b                                                                     #     7/150
MOVE LF@b int@0                                                                 #     8/150
# IF BLOCK                                                                      #     9/150
# IF                                                                            #    10/150
PUSHS LF@a                                                                      #    11/150
PUSHS int@0                                                                     #    12/150
EQS                                                                             #    13/150
PUSHS bool@true                                                                 #    14/150
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    15/150
# THEN                                                                          #    16/150
PUSHS int@20                                                                    #    17/150
RETURN                                                                          #    18/150
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    19/150
LABEL __INTERNAL__COND_0_END                                                    #    20/150
# ELSE                                                                          #    21/150
PUSHS LF@a                                                                      #    22/150
PUSHS int@1                                                                     #    23/150
SUBS                                                                            #    24/150
POPS LF@b                                                                       #    25/150
CLEARS                                                                          #    26/150
CREATEFRAME                                                                     #    27/150
PUSHS LF@b                                                                      #    28/150
DEFVAR TF@nn                                                                    #    29/150
POPS TF@nn                                                                      #    30/150
CALL bar                                                                        #    31/150
POPFRAME                                                                        #    32/150
POPS LF@b                                                                       #    33/150
CLEARS                                                                          #    34/150
PUSHS LF@b                                                                      #    35/150
RETURN                                                                          #    36/150
# END IF                                                                        #    37/150
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    38/150
# END IF BLOCK                                                                  #    39/150
PUSHS int@0                                                                     #    40/150
RETURN                                                                          #    41/150
# END FUNCTION                                                                  #    42/150
# FUNCTION                                                                      #    44/150
LABEL bar                                                                       #    45/150
PUSHFRAME                                                                       #    46/150
DEFVAR LF@a                                                                     #    47/150
MOVE LF@a LF@nn                                                                 #    48/150
DEFVAR LF@b                                                                     #    49/150
MOVE LF@b int@0                                                                 #    50/150
# IF BLOCK                                                                      #    51/150
# IF                                                                            #    52/150
PUSHS LF@a                                                                      #    53/150
PUSHS int@0                                                                     #    54/150
EQS                                                                             #    55/150
PUSHS bool@true                                                                 #    56/150
JUMPIFNEQS __INTERNAL__COND_1_END                                               #    57/150
# THEN                                                                          #    58/150
PUSHS int@20                                                                    #    59/150
RETURN                                                                          #    60/150
JUMP __INTERNAL__COND_1_BLOCK_END                                               #    61/150
LABEL __INTERNAL__COND_1_END                                                    #    62/150
# ELSE                                                                          #    63/150
PUSHS LF@a                                                                      #    64/150
PUSHS int@1                                                                     #    65/150
SUBS                                                                            #    66/150
POPS LF@b                                                                       #    67/150
CLEARS                                                                          #    68/150
CREATEFRAME                                                                     #    69/150
PUSHS LF@b                                                                      #    70/150
DEFVAR TF@a                                                                     #    71/150
POPS TF@a                                                                       #    72/150
CALL foo                                                                        #    73/150
POPFRAME                                                                        #    74/150
POPS LF@b                                                                       #    75/150
CLEARS                                                                          #    76/150
PUSHS LF@b                                                                      #    77/150
RETURN                                                                          #    78/150
# END IF                                                                        #    79/150
LABEL __INTERNAL__COND_1_BLOCK_END                                              #    80/150
# END IF BLOCK                                                                  #    81/150
PUSHS int@0                                                                     #    82/150
RETURN                                                                          #    83/150
# END FUNCTION                                                                  #    84/150
# FUNCTION                                                                      #    86/150
LABEL start                                                                     #    87/150
PUSHFRAME                                                                       #    88/150
DEFVAR LF@b                                                                     #    89/150
MOVE LF@b int@0                                                                 #    90/150
# IF BLOCK                                                                      #    91/150
# IF                                                                            #    92/150
PUSHS LF@a                                                                      #    93/150
PUSHS int@10                                                                    #    94/150
GTS                                                                             #    95/150
PUSHS bool@true                                                                 #    96/150
JUMPIFNEQS __INTERNAL__COND_2_END                                               #    97/150
# THEN                                                                          #    98/150
CREATEFRAME                                                                     #    99/150
PUSHS LF@a                                                                      #   100/150
DEFVAR TF@a                                                                     #   101/150
POPS TF@a                                                                       #   102/150
CALL foo                                                                        #   103/150
POPFRAME                                                                        #   104/150
POPS LF@b                                                                       #   105/150
CLEARS                                                                          #   106/150
PUSHS LF@b                                                                      #   107/150
RETURN                                                                          #   108/150
JUMP __INTERNAL__COND_2_BLOCK_END                                               #   109/150
LABEL __INTERNAL__COND_2_END                                                    #   110/150
# ELSE                                                                          #   111/150
CREATEFRAME                                                                     #   112/150
PUSHS LF@a                                                                      #   113/150
DEFVAR TF@nn                                                                    #   114/150
POPS TF@nn                                                                      #   115/150
CALL bar                                                                        #   116/150
POPFRAME                                                                        #   117/150
POPS LF@b                                                                       #   118/150
CLEARS                                                                          #   119/150
PUSHS LF@b                                                                      #   120/150
RETURN                                                                          #   121/150
# END IF                                                                        #   122/150
LABEL __INTERNAL__COND_2_BLOCK_END                                              #   123/150
# END IF BLOCK                                                                  #   124/150
PUSHS int@0                                                                     #   125/150
RETURN                                                                          #   126/150
# END FUNCTION                                                                  #   127/150
# MAIN                                                                          #   129/150
LABEL main                                                                      #   130/150
CREATEFRAME                                                                     #   131/150
PUSHFRAME                                                                       #   132/150
DEFVAR LF@a                                                                     #   133/150
MOVE LF@a int@0                                                                 #   134/150
CREATEFRAME                                                                     #   135/150
PUSHS int@20                                                                    #   136/150
DEFVAR TF@a                                                                     #   137/150
POPS TF@a                                                                       #   138/150
CALL start                                                                      #   139/150
POPFRAME                                                                        #   140/150
POPS LF@a                                                                       #   141/150
CLEARS                                                                          #   142/150
PUSHS LF@a                                                                      #   143/150
DEFVAR LF@__INTERNAL__VAR_0                                                     #   144/150
POPS LF@__INTERNAL__VAR_0                                                       #   145/150
WRITE LF@__INTERNAL__VAR_0                                                      #   146/150
JUMP __INTERNAL__FILE_END                                                       #   147/150
# PROGRAM END                                                                   #   149/150
LABEL __INTERNAL__FILE_END                                                      #   150/150