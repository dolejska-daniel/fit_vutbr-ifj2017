# 2017-12-04 14:49:32.070767
# SECTION: 99_benchmarks
# TEST: 08
# INFO: factorial by iteration method
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: UNARY, IFTHEN, FUNEXP, BOOLOP
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@vysl
# Executing instruction: IMOVE at line: 12 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@vysl()
# Executing instruction: IPUSHS at line: 13 with following arguments:
# Arg1: Const@=Zadejte cislo pro vypocet faktorialu(string)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 14 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 15 with following arguments:
# Arg1: Stack@=Zadejte cislo pro vypocet faktorialu(string)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 16 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=Zadejte cislo pro vypocet faktorialu(string)
# Executing instruction: IREAD at line: 17 with following arguments:
# Dest: LF@a=0(int)
# Executing instruction: ICREATEFRAME at line: 19 with following arguments:
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 23 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 25 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 32 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 35 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@vysl=0(int)
# Executing instruction: ICLEARS at line: 36 with following arguments:
# Executing instruction: ICREATEFRAME at line: 38 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@vysl=1(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=9(int)
# Dest: LF@a=10(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=90(int)
# Dest: LF@vysl=10(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=8(int)
# Dest: LF@a=9(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=90(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=90(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=720(int)
# Dest: LF@vysl=90(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=7(int)
# Dest: LF@a=8(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=7(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=720(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=720(int)
# Arg2: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=5040(int)
# Dest: LF@vysl=720(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=7(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=6(int)
# Dest: LF@a=7(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=6(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=5040(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=5040(int)
# Arg2: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=30240(int)
# Dest: LF@vysl=5040(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=6(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=5(int)
# Dest: LF@a=6(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=5(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=30240(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=30240(int)
# Arg2: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=151200(int)
# Dest: LF@vysl=30240(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=5(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=4(int)
# Dest: LF@a=5(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=151200(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=151200(int)
# Arg2: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=604800(int)
# Dest: LF@vysl=151200(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@a=4(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=604800(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=604800(int)
# Arg2: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=1814400(int)
# Dest: LF@vysl=604800(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@a=3(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=1814400(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=1814400(int)
# Arg2: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: LF@vysl=1814400(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@a=2(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ICREATEFRAME at line: 46 with following arguments:
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@vysl=3628800(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 49 with following arguments:
# Arg1: Stack@=3628800(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: LF@vysl=3628800(int)
# Executing instruction: ICLEARS at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 53 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 54 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 55 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a=1(int)
# Executing instruction: ICLEARS at line: 56 with following arguments:
# Executing instruction: IJUMP at line: 58 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 60 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@vysl=3628800(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 63 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IPOPS at line: 64 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IWRITE at line: 65 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=3628800(int)
# Executing instruction: ILABEL at line: 67 with following arguments:
# Executing instruction: ICREATEFRAME at line: 68 with following arguments:
# Executing instruction: IJUMP at line: 70 with following arguments:
# Executing instruction: ILABEL at line: 73 with following arguments:
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# -Zadejte cislo pro vypocet faktorialu?  3628800
# +Zadejte cislo pro vypocet faktorialu 3628800

# INTERPRETER STDIN: 
# 10
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: ---
# 
#   1: ' factorial by iteration method
#   2: 
#   3: scope 'Hlavni telo programu
#   4: Dim a As Integer
#   5: DIM vysl AS INTEGER
#   6: PrinT !"Zadejte cislo pro vypocet faktorialu";
#   7: InpuT A
#   8: If a < 0 THEN
#   9: print !"\nFaktorial nelze spocitat\n";
#  10: ELSE
#  11: Vysl = 1
#  12: Do WHile A > 0
#  13: VYSL = vysl * a
#  14: a = A - 1
#  15: LooP
#  16: Print vYsl;
#  17: end IF
#  18: END SCOPE

########################################

.IFJcode17                                                                      #     1/73
JUMP main                                                                       #     2/73
# MAIN                                                                          #     4/73
LABEL main                                                                      #     5/73
CREATEFRAME                                                                     #     6/73
PUSHFRAME                                                                       #     7/73
CREATEFRAME                                                                     #     8/73
DEFVAR LF@a                                                                     #     9/73
MOVE LF@a int@0                                                                 #    10/73
DEFVAR LF@vysl                                                                  #    11/73
MOVE LF@vysl int@0                                                              #    12/73
PUSHS string@Zadejte\032cislo\032pro\032vypocet\032faktorialu                   #    13/73
DEFVAR TF@__INTERNAL__VAR_0                                                     #    14/73
POPS TF@__INTERNAL__VAR_0                                                       #    15/73
WRITE TF@__INTERNAL__VAR_0                                                      #    16/73
READ LF@a int                                                                   #    17/73
# IF BLOCK                                                                      #    18/73
CREATEFRAME                                                                     #    19/73
# IF                                                                            #    20/73
PUSHS LF@a                                                                      #    21/73
PUSHS int@0                                                                     #    22/73
LTS                                                                             #    23/73
PUSHS bool@true                                                                 #    24/73
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    25/73
# THEN                                                                          #    26/73
PUSHS string@\010Faktorial\032nelze\032spocitat\010                             #    27/73
DEFVAR TF@__INTERNAL__VAR_0                                                     #    28/73
POPS TF@__INTERNAL__VAR_0                                                       #    29/73
WRITE TF@__INTERNAL__VAR_0                                                      #    30/73
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    31/73
LABEL __INTERNAL__COND_0_END                                                    #    32/73
# ELSE                                                                          #    33/73
PUSHS int@1                                                                     #    34/73
POPS LF@vysl                                                                    #    35/73
CLEARS                                                                          #    36/73
# DO WHILE                                                                      #    37/73
CREATEFRAME                                                                     #    38/73
LABEL __INTERNAL__LOOP_0_BEGIN                                                  #    39/73
PUSHS LF@a                                                                      #    40/73
PUSHS int@0                                                                     #    41/73
GTS                                                                             #    42/73
PUSHS bool@true                                                                 #    43/73
JUMPIFNEQS __INTERNAL__LOOP_0_END                                               #    44/73
# DO WHILE TRUE                                                                 #    45/73
CREATEFRAME                                                                     #    46/73
PUSHS LF@vysl                                                                   #    47/73
PUSHS LF@a                                                                      #    48/73
MULS                                                                            #    49/73
POPS LF@vysl                                                                    #    50/73
CLEARS                                                                          #    51/73
PUSHS LF@a                                                                      #    52/73
PUSHS int@1                                                                     #    53/73
SUBS                                                                            #    54/73
POPS LF@a                                                                       #    55/73
CLEARS                                                                          #    56/73
# LOOP                                                                          #    57/73
JUMP __INTERNAL__LOOP_0_BEGIN                                                   #    58/73
# DO WHILE FALSE                                                                #    59/73
LABEL __INTERNAL__LOOP_0_END                                                    #    60/73
# DO WHILE END                                                                  #    61/73
PUSHS LF@vysl                                                                   #    62/73
DEFVAR TF@__INTERNAL__VAR_0                                                     #    63/73
POPS TF@__INTERNAL__VAR_0                                                       #    64/73
WRITE TF@__INTERNAL__VAR_0                                                      #    65/73
# END IF                                                                        #    66/73
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    67/73
CREATEFRAME                                                                     #    68/73
# END IF BLOCK                                                                  #    69/73
JUMP __INTERNAL__FILE_END                                                       #    70/73
# PROGRAM END                                                                   #    72/73
LABEL __INTERNAL__FILE_END                                                      #    73/73