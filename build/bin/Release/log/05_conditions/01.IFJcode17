# 2017-12-04 17:23:11.767618
# SECTION: 05_conditions
# TEST: 01
# INFO: most simple if statement
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BOOLOP, UNARY, IFTHEN, FUNEXP
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 5 with following arguments:
# Executing instruction: ICREATEFRAME at line: 6 with following arguments:
# Executing instruction: IPUSHFRAME at line: 7 with following arguments:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: ICREATEFRAME at line: 10 with following arguments:
# Executing instruction: IPUSHS at line: 12 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 13 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 14 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 15 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 16 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: TF@__INTERNAL__VAR_0
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@__INTERNAL__VAR_0()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=42(int)
# Dest: TF@__INTERNAL__VAR_0=0(int)
# Executing instruction: IWRITE at line: 22 with following arguments:
# Arg1: TF@__INTERNAL__VAR_0=42(int)
# Executing instruction: IJUMP at line: 23 with following arguments:
# Executing instruction: ILABEL at line: 32 with following arguments:
# Executing instruction: ICREATEFRAME at line: 33 with following arguments:
# Executing instruction: IJUMP at line: 35 with following arguments:
# Executing instruction: ILABEL at line: 40 with following arguments:
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 64 (31+33)
# 
#   1: ' most simple if statement
#   2: scope
#   3: 	if 8 > 3 then
#   4: 		print 42;
#   5: 	else
#   6: 		print 58;
#   7: 	end if
#   8: end scope

########################################

.IFJcode17                                                                      #     1/40
JUMP main                                                                       #     2/40
# MAIN                                                                          #     4/40
LABEL main                                                                      #     5/40
CREATEFRAME                                                                     #     6/40
PUSHFRAME                                                                       #     7/40
CREATEFRAME                                                                     #     8/40
# IF BLOCK                                                                      #     9/40
CREATEFRAME                                                                     #    10/40
# IF                                                                            #    11/40
PUSHS int@8                                                                     #    12/40
PUSHS int@3                                                                     #    13/40
GTS                                                                             #    14/40
PUSHS bool@true                                                                 #    15/40
JUMPIFNEQS __INTERNAL__COND_0_END                                               #    16/40
# THEN                                                                          #    17/40
PUSHS int@42                                                                    #    18/40
DEFVAR TF@__INTERNAL__VAR_0                                                     #    19/40
MOVE TF@__INTERNAL__VAR_0 int@0                                                 #    20/40
POPS TF@__INTERNAL__VAR_0                                                       #    21/40
WRITE TF@__INTERNAL__VAR_0                                                      #    22/40
JUMP __INTERNAL__COND_0_BLOCK_END                                               #    23/40
LABEL __INTERNAL__COND_0_END                                                    #    24/40
# ELSE                                                                          #    25/40
PUSHS int@58                                                                    #    26/40
DEFVAR TF@__INTERNAL__VAR_0                                                     #    27/40
MOVE TF@__INTERNAL__VAR_0 int@0                                                 #    28/40
POPS TF@__INTERNAL__VAR_0                                                       #    29/40
WRITE TF@__INTERNAL__VAR_0                                                      #    30/40
# END IF                                                                        #    31/40
LABEL __INTERNAL__COND_0_BLOCK_END                                              #    32/40
CREATEFRAME                                                                     #    33/40
# END IF BLOCK                                                                  #    34/40
JUMP __INTERNAL__FILE_END                                                       #    35/40
# MAIN END                                                                      #    37/40
# PROGRAM END                                                                   #    39/40
LABEL __INTERNAL__FILE_END                                                      #    40/40